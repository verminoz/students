<?php
/**
* @file
* Lets users manage student records in the system.
*
* Adds student type in the database
* and gives different privileges to users to view/add/delete
*/

// Add custom CSS to this page
drupal_add_css( drupal_get_path('module', 'students') . '/students.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE) );

/**
* Implements hook_permission().
*/
function students_permission() {

// Create the new permissions to be assigned to user roles
  $items = array(

	  'access students content' => array(
  		'title' => t('Access students'),
      'description' => t('Can only view students'),
    ),
	  'edit students content' => array(
  		'title' => t('Edit students'),
      'description' => t('Can view and edit students'),
    ),
	  'delete students content' => array(
  		'title' => t('Delete students'),
      'description' => t('Can view, edit and delete students'),
    ),

  );

  return $items;
}

/**
* Implements hook_menu().
*/
function students_menu() {

// Create a new menu entry for the Students page
	$items['students/view'] = array(
		'title' => t('Students'),
		'page callback' => 'student_static',
		'access arguments' => array('access students content'),
	);

// Create a delete URL for AJAX
	$items['students/delete/%'] = array(
		'page callback' => 'delete_student',
		'page arguments' => array(2),
		'access arguments' => array('delete students content'),
		'type' => MENU_CALLBACK,
	);

  	return $items;
}

/**
* Custom callback function for page.
*/
function student_static() {

	// Fetch form
    $build = array();
    $build['content'] = array(
        'add students form' => drupal_get_form('students_list_form'),
    );

	return $build;
}

/**
 * Form content
 */
function students_list_form($form, &$form_state) {

// Fetch students
	$students = load_students();

// Create page
	$content = array();

// Paragraph on top
	$content['top'] = array(
			    	'#type' => 'markup',
			    	'#markup' => t('<p>Here can the school staff access the students\' data</p>'),
		    	);

// Table
	$content['table'] = array(
		    		'#theme' => 'table',
		    		'#header' => array(
		    							array( 'data' => t('Name'), ),
		    							array( 'data' => t('Gender'), ),
		    							(user_access('delete students content')) ? array( 'data' => t('Actions') ) : array(),
		    						),
		    		'#rows' => $students,
	    		);

// Add user form in case of teacher or principal
	if ( user_access('edit students content') || user_access('delete students content') ) {
		$content['name'] = array(
			    	'#type' => 'textfield',
			    	'#attributes' => array('class' => array( 'input-name' ), 'placeholder' => t('Insert student\'s name...') ),
			    	'#title' => t('Name (first and last):'),
			    	'#required' => true,
		    	);
		$content['gender'] = array(
			    	'#type' => 'select',
			    	'#attributes' => array('class' => array( 'select-gender' ) ),
			    	'#title' => t('Gender:'),
			    	'#default_value' => 'F',
			    	'#options' => array('F' => t('F'), 'M' => t('M')),
			    	'#required' => true,
		    	);
		$content['submit'] = array(
			    	'#type' => 'submit',
			    	'#value' => t('Add student'),
		    	);
	}

	return $content;
}

/**
 * Loads students from the student table
 */
function load_students() {

// Create SelectQuery object
	$query = db_select('student', 's');

// Build query
	$query->fields('s', array('nid', 'name', 'gender'))
	    ->orderBy('name', 'asc');

// Execute query and process results
	$result = $query->execute();

	$records = array();
    while ($record = $result->fetchAssoc()) {

    	// In case user is the principal add the possibility to delete
    	if ( user_access('delete students content') ) {
    		$record['links'] = '<a href="#" class="delete-button" id="' . $record['nid'] . '">Delete</a>';
    	}

  	// Remove ID columns
    	unset( $record['nid'] );

  	// Add record
        $records[] = array( 'data' => $record );
    }

	return $records;

}

/**
 * Loads students from the student table
 */
function students_list_form_submit($form, &$form_state) {
error_log(json_encode($form_state['values']));
// Build INSERT query
	$query = db_insert('student')->fields( array('name', 'gender') )
								->values( array( 'name' => $form_state['values']['name'], 'gender' => $form_state['values']['gender'] ) );

// Execute query
	$query->execute();

}

/**
 * Deletes a student from the student table
 */
function delete_student($id) {

// Build DELETE query
	$query = db_delete('student')->condition('nid', $id);

// Execute query
	$query->execute();

}