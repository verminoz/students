<?php
/**
* @file
* Lets users manage student records in the system.
*
* Adds student type in the database
* and gives different privileges to users to add/edit/delete
*/

drupal_add_css( drupal_get_path('module', 'custom') . '/css/custom.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE) );

/**
* Implements hook_permission().
*/
function students_permission() {

	// Create the new permissions to be assigned to user roles
    $items = array(

  		'access students content' => array(
  			'title' => 'Access students',
		    'description' => 'Can only view students',
		    ),
  		'edit students content' => array(
  			'title' => 'Edit students',
		    'description' => 'Can view and edit students',
		    ),
  		'delete students content' => array(
  			'title' => 'Delete students',
		    'description' => 'Can view, edit and delete students',
		    ),

    );

    return $items;
}

/**
* Implements hook_menu().
*/
function students_menu() {

	// Create a new menu entry for the Students page
	$items['students/view'] = array(
		'title' => 'Students',
		'page callback' => 'students_view_page',
		'access arguments' => array('access students content'),
	);

  	return $items;
}

/**
* Custom callback function for page.
*/
function students_view_page() {

	// Get user variable
	global $user;

	// Read parameters from address line and pass them to the select function
	$filters = array();
 	if ( isset($_GET['order']) && isset($_GET['sort']) ) {
 		$filters['order'] = $_GET['order'];
 		$filters['sort'] = $_GET['sort'];
 	}

 	// Fetch students
	$students = load_students($filters);

	// Create page
	$content = array();

	// Paragraph on top
	$content[] = array(
			    	'#type' => 'markup',
			    	'#markup' => '<p>Here can the school staff access the students\' data</p>',
		    	);

	// Add button in case of teacher or principal
	if ( in_array( 'teacher', $user->roles ) || in_array( 'principal', $user->roles ) ) {
		$content[] = array(
			    	'#type' => 'markup',
			    	'#markup' => '<div class="add-button">Add student</div>',
		    	);
	}

	// Table
	$content[] = array(
		    		'#theme' => 'table',
		    		'#header' => array(
		    							array( 'data' => 'NID', 'field' => 'nid', 'sort' => 'asc', ),
		    							array( 'data' => 'Name', 'field' => 'name', ),
		    							array( 'data' => 'Gender', 'field' => 'gender', )
		    						),
		    		'#rows' => $students,
	    		);

	// Pager
	$content[] = array(
		    		'#theme' => 'pager',
		    		'#tags' => array( 'First', 'Previous', 'Next', 'Last' ),
		    		'#quantity' => 4,
	    		);

	return $content;
}

/**
 * Loads students from the student table
 */
function load_students($filters) {

	// Get user variable
	global $user;

	// Check filters or leave default values
	$order = 'name';
	if (isset($filters['order'])) {
		$order = $filters['order'];
	}

	$sort = 'asc';
	if (isset($filters['sort'])) {
		$sort = $filters['sort'];
	}

	// Create SelectQuery object
	$query = db_select('student', 's');

	// Build query
	$query->fields('s', array('nid', 'name', 'gender'))
	    ->orderBy($order, $sort)
	    ->range(0, 10);

	// Execute query and process results
	$result = $query->execute();

	$records = array();
    while ($record = $result->fetchAssoc()) {

    	// In case user is a teacher as the possibility to edit
    	if ( in_array( 'teacher', $user->roles ) ) {
    		$record['links'] = '<a href="">Edit</a>';
    	}

    	// In case user is the principal add the possibility to edit AND delete
    	if ( in_array( 'principal', $user->roles ) ) {
    		$record['links'] = '<a href="">Edit</a>';
    		$record['links'] .= '<a href="">Delete</a>';
    	}

    	// Add record
        $records[] = array( 'data' => $record );
    }

	return $records;

}